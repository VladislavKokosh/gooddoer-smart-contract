{
  "address": "0x7C1322e21505bAC3a6dAB70FA2c8DeF25835AD8A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fundraiser",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fundraisingAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "documentName",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "documentUri",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "documentHash",
          "type": "bytes32"
        }
      ],
      "name": "FundraiserCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fundraisingAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "name",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "uri",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IFundraiserStruct.DocumentParams",
          "name": "document",
          "type": "tuple"
        }
      ],
      "name": "createFundraiser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fundraiserId",
          "type": "uint256"
        }
      ],
      "name": "fundraiserById",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "fundraisers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "fundraisersAddresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundraisersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundraiserAddress",
          "type": "address"
        }
      ],
      "name": "isFundraiserExist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x22a86fa734b6215de77a7a0bb6c6bae00897b94b87c3eb641ac59c66199cc9c9",
  "receipt": {
    "to": null,
    "from": "0x2aE4874B596F9CbE37d8709B84063781D7Ce9C3d",
    "contractAddress": "0x7C1322e21505bAC3a6dAB70FA2c8DeF25835AD8A",
    "transactionIndex": 35,
    "gasUsed": "2808161",
    "logsBloom": "0x
    "blockHash": "0xb3aad6ff1757a05f856cb4caec9011d75c248d615ba8a4102e52bb21bd8e144b",
    "transactionHash": "0x22a86fa734b6215de77a7a0bb6c6bae00897b94b87c3eb641ac59c66199cc9c9",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 9589498,
        "transactionHash": "0x22a86fa734b6215de77a7a0bb6c6bae00897b94b87c3eb641ac59c66199cc9c9",
        "address": "0x7C1322e21505bAC3a6dAB70FA2c8DeF25835AD8A",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002ae4874b596f9cbe37d8709b84063781d7ce9c3d",
          "0x0000000000000000000000002ae4874b596f9cbe37d8709b84063781d7ce9c3d"
        ],
        "data": "0x",
        "logIndex": 31,
        "blockHash": "0xb3aad6ff1757a05f856cb4caec9011d75c248d615ba8a4102e52bb21bd8e144b"
      },
      {
        "transactionIndex": 35,
        "blockNumber": 9589498,
        "transactionHash": "0x22a86fa734b6215de77a7a0bb6c6bae00897b94b87c3eb641ac59c66199cc9c9",
        "address": "0x7C1322e21505bAC3a6dAB70FA2c8DeF25835AD8A",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x0000000000000000000000002ae4874b596f9cbe37d8709b84063781d7ce9c3d",
          "0x0000000000000000000000002ae4874b596f9cbe37d8709b84063781d7ce9c3d"
        ],
        "data": "0x",
        "logIndex": 32,
        "blockHash": "0xb3aad6ff1757a05f856cb4caec9011d75c248d615ba8a4102e52bb21bd8e144b"
      }
    ],
    "blockNumber": 9589498,
    "cumulativeGasUsed": "5964134",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2aE4874B596F9CbE37d8709B84063781D7Ce9C3d",
    "0x2aE4874B596F9CbE37d8709B84063781D7Ce9C3d"
  ],
  "numDeployments": 1,
  "solcInputHash": "3b702d68de031f05dedd1e44c3170316",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fundraiser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundraisingAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"documentName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"documentUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"documentHash\",\"type\":\"bytes32\"}],\"name\":\"FundraiserCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundraisingAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IFundraiserStruct.DocumentParams\",\"name\":\"document\",\"type\":\"tuple\"}],\"name\":\"createFundraiser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fundraiserId\",\"type\":\"uint256\"}],\"name\":\"fundraiserById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"fundraisers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"fundraisersAddresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundraisersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundraiserAddress\",\"type\":\"address\"}],\"name\":\"isFundraiserExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GooddoerFactory.sol\":\"GooddoerFactory\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/ERC1643/ERC1643.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC1643} from \\\"./IERC1643.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nabstract contract ERC1643 is IERC1643 {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    mapping(bytes32 => Document) private _documents;\\n    EnumerableSet.Bytes32Set private _docsHashes;\\n\\n    function getDocument(bytes32 documentName) public view virtual returns (string memory, bytes32, uint256) {\\n        require(bytes(_documents[documentName].docURI).length != 0, \\\"\\\");\\n        Document memory document = _documents[documentName];\\n        return (document.docURI, document.docHash, document.lastModified);\\n    }\\n\\n    function getAllDocuments() public view virtual returns (bytes32[] memory documents) {\\n        uint256 documentsCount = _docsHashes.length();\\n        for (uint256 i; i < documentsCount; ) {\\n            documents[i] = _docsHashes.at(i);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function setDocument(bytes32 documentName, string memory uri, bytes32 documentHash) external returns (bool) {\\n        _setDocument(documentName, uri, documentHash);\\n        return true;\\n    }\\n\\n    function removeDocument(bytes32 documentName) external returns (bool) {\\n        _removeDocument(documentName);\\n        return true;\\n    }\\n\\n    function _setDocument(bytes32 documentName, string memory uri, bytes32 documentHash) internal virtual {\\n        require(documentName != bytes32(0), \\\"\\\");\\n        require(bytes(uri).length > 0, \\\"\\\");\\n        if (_documents[documentName].lastModified == 0) {\\n            _docsHashes.add(documentHash);\\n        }\\n        _documents[documentName] = Document({docURI: uri, docHash: documentHash, lastModified: block.timestamp});\\n        emit DocumentUpdated(documentName, uri, documentHash);\\n    }\\n\\n    function _removeDocument(bytes32 documentName) internal virtual {\\n        Document memory document = _documents[documentName];\\n        require(document.lastModified != 0, \\\"Document doesnt exist\\\");\\n        _docsHashes.remove(document.docHash);\\n        delete _documents[documentName];\\n        emit DocumentRemoved(documentName, document.docURI, document.docHash);\\n    }\\n}\\n\",\"keccak256\":\"0xc51683b1885a95b695b133373af2d96a854f03a7bdccea13ae70f750d0629059\",\"license\":\"MIT\"},\"contracts/ERC1643/IERC1643.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface IERC1643 {\\n    struct Document {\\n        bytes32 docHash;\\n        uint256 lastModified;\\n        string docURI;\\n    }\\n\\n    event DocumentRemoved(bytes32 indexed _name, string _uri, bytes32 _documentHash);\\n    event DocumentUpdated(bytes32 indexed _name, string _uri, bytes32 _documentHash);\\n\\n    function getDocument(bytes32 _name) external view returns (string memory, bytes32, uint256);\\n\\n    function getAllDocuments() external view returns (bytes32[] memory);\\n\\n    function setDocument(bytes32 _name, string memory _uri, bytes32 _documentHash) external returns (bool);\\n\\n    function removeDocument(bytes32 _name) external returns (bool);\\n}\\n\",\"keccak256\":\"0xafce0b09886ccbda036bac1f31e0520e181fc2f9d7f0ba322985bae5c7ab3d50\",\"license\":\"MIT\"},\"contracts/Fundraiser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\nimport {IFundraiser} from \\\"./interfaces/IFundraiser.sol\\\";\\nimport {ERC1643} from \\\"./ERC1643/ERC1643.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract Fundraiser is IFundraiser, ERC1643, AccessControl {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    address public immutable factory;\\n\\n    uint256 private _fundraisingAmount;\\n    address private _beneficiary;\\n    Document private _document;\\n\\n    function fundraisingAmount() public view returns (uint256) {\\n        return _fundraisingAmount;\\n    }\\n\\n    function beneficiary() public view returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    constructor(uint256 fundraisingAmount_, address beneficiary_, DocumentParams memory document) {\\n        factory = msg.sender;\\n        _grantRole(ADMIN_ROLE, beneficiary_);\\n        _fundraisingAmount = fundraisingAmount_;\\n        _beneficiary = beneficiary_;\\n        _setDocument(document.name, document.uri, document.hash);\\n    }\\n\\n    function _setDocument(\\n        bytes32 documentName,\\n        string memory uri,\\n        bytes32 documentHash\\n    ) internal override onlyRole(ADMIN_ROLE) {\\n        super._setDocument(documentName, uri, documentHash);\\n    }\\n\\n    function _removeDocument(bytes32 documentName) internal override onlyRole(ADMIN_ROLE) {\\n        super._removeDocument(documentName);\\n    }\\n}\\n\",\"keccak256\":\"0x2fd8dea127dc879bbe08f2afe991505c02af7acd350ee8c77da7ce5e0c31b828\",\"license\":\"MIT\"},\"contracts/GooddoerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IGooddoerFactory} from \\\"./interfaces/IGooddoerFactory.sol\\\";\\nimport {AccessControlEnumerable, EnumerableSet} from \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport {Fundraiser} from \\\"./Fundraiser.sol\\\";\\n\\ncontract GooddoerFactory is IGooddoerFactory, AccessControlEnumerable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    EnumerableSet.AddressSet private _fundraisers;\\n\\n    function fundraisersCount() external view returns (uint256) {\\n        return _fundraisers.length();\\n    }\\n\\n    function isFundraiserExist(address fundraiserAddress) public view returns (bool) {\\n        return _fundraisers.contains(fundraiserAddress);\\n    }\\n\\n    function fundraiserById(uint256 fundraiserId) external view returns (address) {\\n        require(fundraiserId < _fundraisers.length(), \\\"GooddoerFactory: Invalid fundraiser id\\\");\\n        return _fundraisers.at(fundraiserId);\\n    }\\n\\n    function fundraisers(uint256 offset, uint256 limit) external view returns (address[] memory fundraisersAddresses) {\\n        uint256 salesCount = _fundraisers.length();\\n        if (offset >= salesCount) return new address[](0);\\n        uint256 to = offset + limit;\\n        if (salesCount < to) to = salesCount;\\n        fundraisersAddresses = new address[](to - offset);\\n        for (uint256 i = 0; i < fundraisersAddresses.length; i++) fundraisersAddresses[i] = _fundraisers.at(offset + i);\\n    }\\n\\n    constructor(address admin_, address operator_) {\\n        require(admin_ != address(0), \\\"GooddoerFactory: Admin is zero address\\\");\\n        require(operator_ != address(0), \\\"GooddoerFactory: Operator is zero address\\\");\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin_);\\n        _grantRole(OPERATOR_ROLE, operator_);\\n    }\\n\\n    function createFundraiser(\\n        uint256 fundraisingAmount,\\n        address beneficiary,\\n        DocumentParams calldata document\\n    ) external returns (bool) {\\n        require(fundraisingAmount != 0, \\\"GooddoerFactory: Fundraising amount lte zero\\\");\\n        require(beneficiary != address(0), \\\"GooddoerFactory: Beneficiary is zero address\\\");\\n        require(document.name != bytes32(0), \\\"GooddoerFactory: Document name is zero bytes\\\");\\n        require(bytes(document.uri).length > 0, \\\"GooddoerFactory: Document uri is empty\\\");\\n        bytes memory bytecode = abi.encodePacked(\\n            type(Fundraiser).creationCode,\\n            abi.encode(fundraisingAmount, beneficiary, document)\\n        );\\n        bytes32 salt = keccak256(\\n            abi.encodePacked(fundraisingAmount, beneficiary, document.name, document.uri, document.hash)\\n        );\\n        address fundraiser;\\n        assembly {\\n            fundraiser := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n            if iszero(extcodesize(fundraiser)) {\\n                revert(0, 0)\\n            }\\n        }\\n        _fundraisers.add(fundraiser);\\n        emit FundraiserCreated(fundraiser, fundraisingAmount, beneficiary, document.name, document.uri, document.hash);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x20d7f8276edf8c6dbfe4dd585839fb2340b1df358f920c1f86f827265aaff6b3\",\"license\":\"MIT\"},\"contracts/interfaces/IFundraiser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFundraiserStruct} from \\\"./IFundraiserStruct.sol\\\";\\n\\ninterface IFundraiser is IFundraiserStruct {\\n    function fundraisingAmount() external view returns (uint256);\\n\\n    function beneficiary() external view returns (address);\\n}\\n\",\"keccak256\":\"0x12a52eded4ef78a0e9ad4e18a19ab83a2ac1a8de091f4f66cb9f025e51461ac9\",\"license\":\"MIT\"},\"contracts/interfaces/IFundraiserStruct.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IFundraiserStruct {\\n    struct DocumentParams {\\n        bytes32 name;\\n        string uri;\\n        bytes32 hash;\\n    }\\n}\\n\",\"keccak256\":\"0x47da83ac6839d6d0172169503162f729d1f6d4d9c378b9f42c13b86a77f149fb\",\"license\":\"MIT\"},\"contracts/interfaces/IGooddoerFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFundraiserStruct} from \\\"./IFundraiserStruct.sol\\\";\\n\\ninterface IGooddoerFactory is IFundraiserStruct {\\n    event FundraiserCreated(\\n        address indexed fundraiser,\\n        uint256 fundraisingAmount,\\n        address beneficiary,\\n        bytes32 documentName,\\n        string documentUri,\\n        bytes32 documentHash\\n    );\\n\\n    function createFundraiser(\\n        uint256 fundraisingAmount,\\n        address beneficiary,\\n        DocumentParams calldata document\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf7b6980898995bd7a5c42ad967315b1742c777f899125617594e44cccb7fb02a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801562000010575f80fd5b50604051620031383803806200313883398101604081905262000033916200029b565b6001600160a01b0382166200009e5760405162461bcd60e51b815260206004820152602660248201527f476f6f64646f6572466163746f72793a2041646d696e206973207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6001600160a01b038116620001085760405162461bcd60e51b815260206004820152602960248201527f476f6f64646f6572466163746f72793a204f70657261746f72206973207a65726044820152686f206164647265737360b81b606482015260840162000095565b620001145f8362000148565b620001407f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9298262000148565b5050620002d1565b62000154828262000172565b5f8281526001602052604090206200016d908262000211565b505050565b5f828152602081815260408083206001600160a01b038516845290915290205460ff166200020d575f828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001cc3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b5f62000227836001600160a01b03841662000230565b90505b92915050565b5f8181526001830160205260408120546200027757508154600181810184555f8481526020808220909301849055845484825282860190935260409020919091556200022a565b505f6200022a565b80516001600160a01b038116811462000296575f80fd5b919050565b5f8060408385031215620002ad575f80fd5b620002b8836200027f565b9150620002c8602084016200027f565b90509250929050565b612e5980620002df5f395ff3fe608060405234801562000010575f80fd5b506004361062000104575f3560e01c8063755f4df2116200009f578063a217fddf116200006b578063a217fddf1462000254578063ca15c873146200025c578063d547741f1462000273578063f5b541a6146200028a575f80fd5b8063755f4df214620002055780639010d07c146200021c57806391d1485414620002335780639d3b4355146200024a575f80fd5b806336568abe11620000df57806336568abe14620001815780634122af4f14620001985780634598775e14620001af578063704914f814620001df575f80fd5b806301ffc9a71462000108578063248a9ca314620001345780632f2ff15d1462000168575b5f80fd5b6200011f6200011936600462000e38565b620002b2565b60405190151581526020015b60405180910390f35b620001596200014536600462000e61565b5f9081526020819052604090206001015490565b6040519081526020016200012b565b6200017f6200017936600462000e95565b620002df565b005b6200017f6200019236600462000e95565b6200030c565b6200011f620001a936600462000ec2565b62000392565b620001c6620001c036600462000e61565b620003a0565b6040516001600160a01b0390911681526020016200012b565b620001f6620001f036600462000ede565b62000419565b6040516200012b919062000eff565b6200011f6200021636600462000f4d565b62000527565b620001c66200022d36600462000ede565b62000817565b6200011f6200024436600462000e95565b62000837565b620001596200085f565b620001595f81565b620001596200026d36600462000e61565b62000871565b6200017f6200028436600462000e95565b62000889565b620001597f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b5f6001600160e01b03198216635a05180f60e01b1480620002d95750620002d982620008b1565b92915050565b5f82815260208190526040902060010154620002fb81620008e7565b620003078383620008f6565b505050565b6001600160a01b0381163314620003825760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6200038e82826200091b565b5050565b5f620002d960028362000940565b5f620003ad600262000962565b82106200040c5760405162461bcd60e51b815260206004820152602660248201527f476f6f64646f6572466163746f72793a20496e76616c69642066756e647261696044820152651cd95c881a5960d21b606482015260840162000379565b620002d96002836200096c565b60605f62000428600262000962565b905080841062000448575050604080515f815260208101909152620002d9565b5f62000455848662000fd3565b905080821015620004635750805b6200046f858262000fe9565b67ffffffffffffffff8111156200048a576200048a62000fab565b604051908082528060200260200182016040528015620004b4578160200160208202803683370190505b5092505f5b83518110156200051e57620004dc620004d3828862000fd3565b6002906200096c565b848281518110620004f157620004f162000fff565b6001600160a01b039092166020928302919091019091015280620005158162001013565b915050620004b9565b50505092915050565b5f835f036200058e5760405162461bcd60e51b815260206004820152602c60248201527f476f6f64646f6572466163746f72793a2046756e6472616973696e6720616d6f60448201526b756e74206c7465207a65726f60a01b606482015260840162000379565b6001600160a01b038316620005fb5760405162461bcd60e51b815260206004820152602c60248201527f476f6f64646f6572466163746f72793a2042656e65666963696172792069732060448201526b7a65726f206164647265737360a01b606482015260840162000379565b8135620006605760405162461bcd60e51b815260206004820152602c60248201527f476f6f64646f6572466163746f72793a20446f63756d656e74206e616d65206960448201526b73207a65726f20627974657360a01b606482015260840162000379565b5f6200067060208401846200102e565b905011620006d05760405162461bcd60e51b815260206004820152602660248201527f476f6f64646f6572466163746f72793a20446f63756d656e742075726920697360448201526520656d70747960d01b606482015260840162000379565b5f60405180602001620006e39062000e2a565b601f1982820381018352601f9091011660408190526200070c90879087908790602001620010a3565b60408051601f19818403018152908290526200072c92916020016200115a565b60408051601f1981840301815291905290505f858585356200075260208801886200102e565b88604001356040516020016200076e969594939291906200118c565b6040516020818303038152906040528051906020012090505f818351602085015ff59050803b6200079d575f80fd5b620007aa60028262000979565b506001600160a01b0381167fe8333866aa1ed2bfa2e686cd62d1ccfffd5031430afe9ace15197848d2a980f988888835620007e960208b018b6200102e565b8b604001356040516200080296959493929190620011c7565b60405180910390a25060019695505050505050565b5f8281526001602052604081206200083090836200096c565b9392505050565b5f918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b5f6200086c600262000962565b905090565b5f818152600160205260408120620002d99062000962565b5f82815260208190526040902060010154620008a581620008e7565b6200030783836200091b565b5f6001600160e01b03198216637965db0b60e01b1480620002d957506301ffc9a760e01b6001600160e01b0319831614620002d9565b620008f381336200098f565b50565b620009028282620009f3565b5f82815260016020526040902062000307908262000979565b62000927828262000a7a565b5f82815260016020526040902062000307908262000ae1565b6001600160a01b0381165f908152600183016020526040812054151562000830565b5f620002d9825490565b5f62000830838362000af7565b5f62000830836001600160a01b03841662000b20565b6200099b828262000837565b6200038e57620009ab8162000b6f565b620009b883602062000b82565b604051602001620009cb92919062001209565b60408051601f198184030181529082905262461bcd60e51b8252620003799160040162001281565b620009ff828262000837565b6200038e575f828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905562000a363390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b62000a86828262000837565b156200038e575f828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b5f62000830836001600160a01b03841662000d36565b5f825f01828154811062000b0f5762000b0f62000fff565b905f5260205f200154905092915050565b5f81815260018301602052604081205462000b6757508154600181810184555f848152602080822090930184905584548482528286019093526040902091909155620002d9565b505f620002d9565b6060620002d96001600160a01b03831660145b60605f62000b92836002620012b5565b62000b9f90600262000fd3565b67ffffffffffffffff81111562000bba5762000bba62000fab565b6040519080825280601f01601f19166020018201604052801562000be5576020820181803683370190505b509050600360fc1b815f8151811062000c025762000c0262000fff565b60200101906001600160f81b03191690815f1a905350600f60fb1b8160018151811062000c335762000c3362000fff565b60200101906001600160f81b03191690815f1a9053505f62000c57846002620012b5565b62000c6490600162000fd3565b90505b600181111562000ce5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062000c9c5762000c9c62000fff565b1a60f81b82828151811062000cb55762000cb562000fff565b60200101906001600160f81b03191690815f1a90535060049490941c9362000cdd81620012cf565b905062000c67565b508315620008305760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000379565b5f818152600183016020526040812054801562000e20575f62000d5b60018362000fe9565b85549091505f9062000d709060019062000fe9565b905081811462000dd6575f865f01828154811062000d925762000d9262000fff565b905f5260205f200154905080875f01848154811062000db55762000db562000fff565b5f918252602080832090910192909255918252600188019052604090208390555b855486908062000dea5762000dea620012e7565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f905560019350505050620002d9565b5f915050620002d9565b611b2880620012fc83390190565b5f6020828403121562000e49575f80fd5b81356001600160e01b03198116811462000830575f80fd5b5f6020828403121562000e72575f80fd5b5035919050565b80356001600160a01b038116811462000e90575f80fd5b919050565b5f806040838503121562000ea7575f80fd5b8235915062000eb96020840162000e79565b90509250929050565b5f6020828403121562000ed3575f80fd5b620008308262000e79565b5f806040838503121562000ef0575f80fd5b50508035926020909101359150565b602080825282518282018190525f9190848201906040850190845b8181101562000f415783516001600160a01b03168352928401929184019160010162000f1a565b50909695505050505050565b5f805f6060848603121562000f60575f80fd5b8335925062000f726020850162000e79565b9150604084013567ffffffffffffffff81111562000f8e575f80fd5b84016060818703121562000fa0575f80fd5b809150509250925092565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b80820180821115620002d957620002d962000fbf565b81810381811115620002d957620002d962000fbf565b634e487b7160e01b5f52603260045260245ffd5b5f6001820162001027576200102762000fbf565b5060010190565b5f808335601e1984360301811262001044575f80fd5b83018035915067ffffffffffffffff8211156200105f575f80fd5b60200191503681900382131562001074575f80fd5b9250929050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b83815260018060a01b038316602082015260606040820152813560608201525f6020830135601e19843603018112620010da575f80fd5b830160208101903567ffffffffffffffff811115620010f7575f80fd5b80360382131562001106575f80fd5b606060808501526200111d60c0850182846200107b565b915050604084013560a084015280915050949350505050565b5f5b838110156200115257818101518382015260200162001138565b50505f910152565b5f83516200116d81846020880162001136565b8351908301906200118381836020880162001136565b01949350505050565b8681526bffffffffffffffffffffffff198660601b166020820152846034820152828460548301376054920191820152607401949350505050565b86815260018060a01b038616602082015284604082015260a060608201525f620011f660a0830185876200107b565b9050826080830152979650505050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081525f83516200124281601785016020880162001136565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516200127581602884016020880162001136565b01602801949350505050565b602081525f8251806020840152620012a181604085016020870162001136565b601f01601f19169190910160400192915050565b8082028115828204841417620002d957620002d962000fbf565b5f81620012e057620012e062000fbf565b505f190190565b634e487b7160e01b5f52603160045260245ffdfe60a060405234801562000010575f80fd5b5060405162001b2838038062001b288339810160408190526200003391620005b3565b33608052620000515f8051602062001b088339815191528362000093565b6004839055600580546001600160a01b0319166001600160a01b0384161790558051602082015160408301516200008a9291906200011d565b50505062000954565b6200009f82826200014a565b62000119575f8281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620000d83390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b5f8051602062001b08833981519152620001378162000176565b6200014484848462000185565b50505050565b5f8281526003602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b62000182813362000290565b50565b82620001b15760405162461bcd60e51b8152602060048201525f60248201526044015b60405180910390fd5b5f825111620001dc5760405162461bcd60e51b8152602060048201525f6024820152604401620001a8565b5f838152602081905260408120600101549003620002035762000201600182620002f4565b505b604080516060810182528281524260208083019182528284018681525f888152918290529390208251815590516001820155915190919060028201906200024b908262000740565b50905050827fb4c22d60cd550a815744f04e3ff5278bf19684565ee00e2b084041b6024bd6f683836040516200028392919062000835565b60405180910390a2505050565b6200029c82826200014a565b6200011957620002ac8162000308565b620002b98360206200031b565b604051602001620002cc92919062000858565b60408051601f198184030181529082905262461bcd60e51b8252620001a891600401620008d0565b5f620003018383620004ce565b9392505050565b6060620001706001600160a01b03831660145b60605f6200032b836002620008f8565b6200033890600262000912565b6001600160401b038111156200035257620003526200051d565b6040519080825280601f01601f1916602001820160405280156200037d576020820181803683370190505b509050600360fc1b815f815181106200039a576200039a62000928565b60200101906001600160f81b03191690815f1a905350600f60fb1b81600181518110620003cb57620003cb62000928565b60200101906001600160f81b03191690815f1a9053505f620003ef846002620008f8565b620003fc90600162000912565b90505b60018111156200047d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062000434576200043462000928565b1a60f81b8282815181106200044d576200044d62000928565b60200101906001600160f81b03191690815f1a90535060049490941c9362000475816200093c565b9050620003ff565b508315620003015760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620001a8565b5f8181526001830160205260408120546200051557508154600181810184555f84815260208082209093018490558454848252828601909352604090209190915562000170565b505f62000170565b634e487b7160e01b5f52604160045260245ffd5b604051606081016001600160401b03811182821017156200055657620005566200051d565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200058757620005876200051d565b604052919050565b5f5b83811015620005ab57818101518382015260200162000591565b50505f910152565b5f805f60608486031215620005c6575f80fd5b8351602080860151919450906001600160a01b0381168114620005e7575f80fd5b60408601519093506001600160401b038082111562000604575f80fd5b908601906060828903121562000618575f80fd5b6200062262000531565b82518152838301518281111562000637575f80fd5b8301601f81018a1362000648575f80fd5b8051838111156200065d576200065d6200051d565b62000671601f8201601f191687016200055c565b93508084528a8682840101111562000687575f80fd5b62000698818786018885016200058f565b5050928301526040908101519082015292959194509192509050565b600181811c90821680620006c957607f821691505b602082108103620006e857634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200073b575f81815260208120601f850160051c81016020861015620007165750805b601f850160051c820191505b81811015620007375782815560010162000722565b5050505b505050565b81516001600160401b038111156200075c576200075c6200051d565b62000774816200076d8454620006b4565b84620006ee565b602080601f831160018114620007aa575f8415620007925750858301515b5f19600386901b1c1916600185901b17855562000737565b5f85815260208120601f198616915b82811015620007da57888601518255948401946001909101908401620007b9565b5085821015620007f857878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f8151808452620008218160208601602086016200058f565b601f01601f19169290920160200192915050565b604081525f62000849604083018562000808565b90508260208301529392505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081525f8351620008918160178501602088016200058f565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351620008c48160288401602088016200058f565b01602801949350505050565b602081525f62000301602083018462000808565b634e487b7160e01b5f52601160045260245ffd5b8082028115828204841417620001705762000170620008e4565b80820180821115620001705762000170620008e4565b634e487b7160e01b5f52603260045260245ffd5b5f816200094d576200094d620008e4565b505f190190565b60805161119b6200096d5f395f610244015261119b5ff3fe608060405234801561000f575f80fd5b50600436106100f0575f3560e01c806375b238fc11610093578063b10d6b4111610063578063b10d6b411461020a578063c35018481461022c578063c45a01551461023f578063d547741f14610266575f80fd5b806375b238fc146101b457806391d14854146101db5780639fa5f50b146101ee578063a217fddf14610203575f80fd5b80632f2ff15d116100ce5780632f2ff15d1461015f57806336568abe1461017457806338af3eed1461018757806374dcba56146101ac575f80fd5b8063010648ca146100f457806301ffc9a71461011c578063248a9ca31461012f575b5f80fd5b610107610102366004610d07565b610279565b60405190151581526020015b60405180910390f35b61010761012a366004610dc4565b61028f565b61015161013d366004610deb565b5f9081526003602052604090206001015490565b604051908152602001610113565b61017261016d366004610e02565b6102c5565b005b610172610182366004610e02565b6102ee565b6005546001600160a01b03165b6040516001600160a01b039091168152602001610113565b600454610151565b6101517fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6101076101e9366004610e02565b610371565b6101f661039b565b6040516101139190610e3b565b6101515f81565b61021d610218366004610deb565b6103e9565b60405161011393929190610ecb565b61010761023a366004610deb565b610508565b6101947f000000000000000000000000000000000000000000000000000000000000000081565b610172610274366004610e02565b61051a565b5f61028584848461053e565b5060019392505050565b5f6001600160e01b03198216637965db0b60e01b14806102bf57506301ffc9a760e01b6001600160e01b03198316145b92915050565b5f828152600360205260409020600101546102df81610579565b6102e98383610586565b505050565b6001600160a01b03811633146103635760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61036d828261060b565b5050565b5f9182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60605f6103a86001610671565b90505f5b818110156103e4576103bf60018261067a565b8382815181106103d1576103d1610eef565b60209081029190910101526001016103ac565b505090565b5f818152602081905260408120600201805460609291829161040a90610f03565b90505f036104335760405162461bcd60e51b8152602060048201525f602482015260440161035a565b5f84815260208181526040808320815160608101835281548152600182015493810193909352600281018054919284019161046d90610f03565b80601f016020809104026020016040519081016040528092919081815260200182805461049990610f03565b80156104e45780601f106104bb576101008083540402835291602001916104e4565b820191905f5260205f20905b8154815290600101906020018083116104c757829003601f168201915b50505091909252505050604081015181516020909201519097919650945092505050565b5f6105128261068c565b506001919050565b5f8281526003602052604090206001015461053481610579565b6102e9838361060b565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561056881610579565b6105738484846106bf565b50505050565b61058381336107bb565b50565b6105908282610371565b61036d575f8281526003602090815260408083206001600160a01b03851684529091529020805460ff191660011790556105c73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6106158282610371565b1561036d575f8281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b5f6102bf825490565b5f6106858383610814565b9392505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756106b681610579565b61036d8261083a565b826106e55760405162461bcd60e51b8152602060048201525f602482015260440161035a565b5f82511161070e5760405162461bcd60e51b8152602060048201525f602482015260440161035a565b5f838152602081905260408120600101549003610732576107306001826109bc565b505b604080516060810182528281524260208083019182528284018681525f888152918290529390208251815590516001820155915190919060028201906107789082610f88565b50905050827fb4c22d60cd550a815744f04e3ff5278bf19684565ee00e2b084041b6024bd6f683836040516107ae929190611044565b60405180910390a2505050565b6107c58282610371565b61036d576107d2816109c7565b6107dd8360206109d9565b6040516020016107ee929190611065565b60408051601f198184030181529082905262461bcd60e51b825261035a916004016110d9565b5f825f01828154811061082957610829610eef565b905f5260205f200154905092915050565b5f81815260208181526040808320815160608101835281548152600182015493810193909352600281018054919284019161087490610f03565b80601f01602080910402602001604051908101604052809291908181526020018280546108a090610f03565b80156108eb5780601f106108c2576101008083540402835291602001916108eb565b820191905f5260205f20905b8154815290600101906020018083116108ce57829003601f168201915b505050505081525050905080602001515f036109415760405162461bcd60e51b8152602060048201526015602482015274111bd8dd5b595b9d08191bd95cdb9d08195e1a5cdd605a1b604482015260640161035a565b805161094f90600190610b6f565b505f82815260208190526040812081815560018101829055906109756002830182610ca9565b5050817f3d9bba27d3e360d8c80645beed7e991454a8271bf6f269a24f7782be0f0d06548260400151835f01516040516109b0929190611044565b60405180910390a25050565b5f6106858383610b7a565b60606102bf6001600160a01b03831660145b60605f6109e78360026110ff565b6109f2906002611116565b67ffffffffffffffff811115610a0a57610a0a610cf3565b6040519080825280601f01601f191660200182016040528015610a34576020820181803683370190505b509050600360fc1b815f81518110610a4e57610a4e610eef565b60200101906001600160f81b03191690815f1a905350600f60fb1b81600181518110610a7c57610a7c610eef565b60200101906001600160f81b03191690815f1a9053505f610a9e8460026110ff565b610aa9906001611116565b90505b6001811115610b20576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610add57610add610eef565b1a60f81b828281518110610af357610af3610eef565b60200101906001600160f81b03191690815f1a90535060049490941c93610b1981611129565b9050610aac565b5083156106855760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161035a565b5f6106858383610bc6565b5f818152600183016020526040812054610bbf57508154600181810184555f8481526020808220909301849055845484825282860190935260409020919091556102bf565b505f6102bf565b5f8181526001830160205260408120548015610ca0575f610be860018361113e565b85549091505f90610bfb9060019061113e565b9050818114610c5a575f865f018281548110610c1957610c19610eef565b905f5260205f200154905080875f018481548110610c3957610c39610eef565b5f918252602080832090910192909255918252600188019052604090208390555b8554869080610c6b57610c6b611151565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f9055600193505050506102bf565b5f9150506102bf565b508054610cb590610f03565b5f825580601f10610cc4575050565b601f0160209004905f5260205f209081019061058391905b80821115610cef575f8155600101610cdc565b5090565b634e487b7160e01b5f52604160045260245ffd5b5f805f60608486031215610d19575f80fd5b83359250602084013567ffffffffffffffff80821115610d37575f80fd5b818601915086601f830112610d4a575f80fd5b813581811115610d5c57610d5c610cf3565b604051601f8201601f19908116603f01168101908382118183101715610d8457610d84610cf3565b81604052828152896020848701011115610d9c575f80fd5b826020860160208301375f602084830101528096505050505050604084013590509250925092565b5f60208284031215610dd4575f80fd5b81356001600160e01b031981168114610685575f80fd5b5f60208284031215610dfb575f80fd5b5035919050565b5f8060408385031215610e13575f80fd5b8235915060208301356001600160a01b0381168114610e30575f80fd5b809150509250929050565b602080825282518282018190525f9190848201906040850190845b81811015610e7257835183529284019291840191600101610e56565b50909695505050505050565b5f5b83811015610e98578181015183820152602001610e80565b50505f910152565b5f8151808452610eb7816020860160208601610e7e565b601f01601f19169290920160200192915050565b606081525f610edd6060830186610ea0565b60208301949094525060400152919050565b634e487b7160e01b5f52603260045260245ffd5b600181811c90821680610f1757607f821691505b602082108103610f3557634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156102e9575f81815260208120601f850160051c81016020861015610f615750805b601f850160051c820191505b81811015610f8057828155600101610f6d565b505050505050565b815167ffffffffffffffff811115610fa257610fa2610cf3565b610fb681610fb08454610f03565b84610f3b565b602080601f831160018114610fe9575f8415610fd25750858301515b5f19600386901b1c1916600185901b178555610f80565b5f85815260208120601f198616915b8281101561101757888601518255948401946001909101908401610ff8565b508582101561103457878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b604081525f6110566040830185610ea0565b90508260208301529392505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081525f835161109c816017850160208801610e7e565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516110cd816028840160208801610e7e565b01602801949350505050565b602081525f6106856020830184610ea0565b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176102bf576102bf6110eb565b808201808211156102bf576102bf6110eb565b5f81611137576111376110eb565b505f190190565b818103818111156102bf576102bf6110eb565b634e487b7160e01b5f52603160045260245ffdfea26469706673582212201a50ae607e5d1b04d6ec79cc936cad9a7d5419e3843e4f17b3b77f7e8b1d77ba64736f6c63430008150033a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220b5d53c0100f4b654223acaad3ce4cdc5465227299d9b4102e1af29a90ae2ffa864736f6c63430008150033",
  "deployedBytecode": "0x608060405234801562000010575f80fd5b506004361062000104575f3560e01c8063755f4df2116200009f578063a217fddf116200006b578063a217fddf1462000254578063ca15c873146200025c578063d547741f1462000273578063f5b541a6146200028a575f80fd5b8063755f4df214620002055780639010d07c146200021c57806391d1485414620002335780639d3b4355146200024a575f80fd5b806336568abe11620000df57806336568abe14620001815780634122af4f14620001985780634598775e14620001af578063704914f814620001df575f80fd5b806301ffc9a71462000108578063248a9ca314620001345780632f2ff15d1462000168575b5f80fd5b6200011f6200011936600462000e38565b620002b2565b60405190151581526020015b60405180910390f35b620001596200014536600462000e61565b5f9081526020819052604090206001015490565b6040519081526020016200012b565b6200017f6200017936600462000e95565b620002df565b005b6200017f6200019236600462000e95565b6200030c565b6200011f620001a936600462000ec2565b62000392565b620001c6620001c036600462000e61565b620003a0565b6040516001600160a01b0390911681526020016200012b565b620001f6620001f036600462000ede565b62000419565b6040516200012b919062000eff565b6200011f6200021636600462000f4d565b62000527565b620001c66200022d36600462000ede565b62000817565b6200011f6200024436600462000e95565b62000837565b620001596200085f565b620001595f81565b620001596200026d36600462000e61565b62000871565b6200017f6200028436600462000e95565b62000889565b620001597f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b5f6001600160e01b03198216635a05180f60e01b1480620002d95750620002d982620008b1565b92915050565b5f82815260208190526040902060010154620002fb81620008e7565b620003078383620008f6565b505050565b6001600160a01b0381163314620003825760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6200038e82826200091b565b5050565b5f620002d960028362000940565b5f620003ad600262000962565b82106200040c5760405162461bcd60e51b815260206004820152602660248201527f476f6f64646f6572466163746f72793a20496e76616c69642066756e647261696044820152651cd95c881a5960d21b606482015260840162000379565b620002d96002836200096c565b60605f62000428600262000962565b905080841062000448575050604080515f815260208101909152620002d9565b5f62000455848662000fd3565b905080821015620004635750805b6200046f858262000fe9565b67ffffffffffffffff8111156200048a576200048a62000fab565b604051908082528060200260200182016040528015620004b4578160200160208202803683370190505b5092505f5b83518110156200051e57620004dc620004d3828862000fd3565b6002906200096c565b848281518110620004f157620004f162000fff565b6001600160a01b039092166020928302919091019091015280620005158162001013565b915050620004b9565b50505092915050565b5f835f036200058e5760405162461bcd60e51b815260206004820152602c60248201527f476f6f64646f6572466163746f72793a2046756e6472616973696e6720616d6f60448201526b756e74206c7465207a65726f60a01b606482015260840162000379565b6001600160a01b038316620005fb5760405162461bcd60e51b815260206004820152602c60248201527f476f6f64646f6572466163746f72793a2042656e65666963696172792069732060448201526b7a65726f206164647265737360a01b606482015260840162000379565b8135620006605760405162461bcd60e51b815260206004820152602c60248201527f476f6f64646f6572466163746f72793a20446f63756d656e74206e616d65206960448201526b73207a65726f20627974657360a01b606482015260840162000379565b5f6200067060208401846200102e565b905011620006d05760405162461bcd60e51b815260206004820152602660248201527f476f6f64646f6572466163746f72793a20446f63756d656e742075726920697360448201526520656d70747960d01b606482015260840162000379565b5f60405180602001620006e39062000e2a565b601f1982820381018352601f9091011660408190526200070c90879087908790602001620010a3565b60408051601f19818403018152908290526200072c92916020016200115a565b60408051601f1981840301815291905290505f858585356200075260208801886200102e565b88604001356040516020016200076e969594939291906200118c565b6040516020818303038152906040528051906020012090505f818351602085015ff59050803b6200079d575f80fd5b620007aa60028262000979565b506001600160a01b0381167fe8333866aa1ed2bfa2e686cd62d1ccfffd5031430afe9ace15197848d2a980f988888835620007e960208b018b6200102e565b8b604001356040516200080296959493929190620011c7565b60405180910390a25060019695505050505050565b5f8281526001602052604081206200083090836200096c565b9392505050565b5f918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b5f6200086c600262000962565b905090565b5f818152600160205260408120620002d99062000962565b5f82815260208190526040902060010154620008a581620008e7565b6200030783836200091b565b5f6001600160e01b03198216637965db0b60e01b1480620002d957506301ffc9a760e01b6001600160e01b0319831614620002d9565b620008f381336200098f565b50565b620009028282620009f3565b5f82815260016020526040902062000307908262000979565b62000927828262000a7a565b5f82815260016020526040902062000307908262000ae1565b6001600160a01b0381165f908152600183016020526040812054151562000830565b5f620002d9825490565b5f62000830838362000af7565b5f62000830836001600160a01b03841662000b20565b6200099b828262000837565b6200038e57620009ab8162000b6f565b620009b883602062000b82565b604051602001620009cb92919062001209565b60408051601f198184030181529082905262461bcd60e51b8252620003799160040162001281565b620009ff828262000837565b6200038e575f828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905562000a363390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b62000a86828262000837565b156200038e575f828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b5f62000830836001600160a01b03841662000d36565b5f825f01828154811062000b0f5762000b0f62000fff565b905f5260205f200154905092915050565b5f81815260018301602052604081205462000b6757508154600181810184555f848152602080822090930184905584548482528286019093526040902091909155620002d9565b505f620002d9565b6060620002d96001600160a01b03831660145b60605f62000b92836002620012b5565b62000b9f90600262000fd3565b67ffffffffffffffff81111562000bba5762000bba62000fab565b6040519080825280601f01601f19166020018201604052801562000be5576020820181803683370190505b509050600360fc1b815f8151811062000c025762000c0262000fff565b60200101906001600160f81b03191690815f1a905350600f60fb1b8160018151811062000c335762000c3362000fff565b60200101906001600160f81b03191690815f1a9053505f62000c57846002620012b5565b62000c6490600162000fd3565b90505b600181111562000ce5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062000c9c5762000c9c62000fff565b1a60f81b82828151811062000cb55762000cb562000fff565b60200101906001600160f81b03191690815f1a90535060049490941c9362000cdd81620012cf565b905062000c67565b508315620008305760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000379565b5f818152600183016020526040812054801562000e20575f62000d5b60018362000fe9565b85549091505f9062000d709060019062000fe9565b905081811462000dd6575f865f01828154811062000d925762000d9262000fff565b905f5260205f200154905080875f01848154811062000db55762000db562000fff565b5f918252602080832090910192909255918252600188019052604090208390555b855486908062000dea5762000dea620012e7565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f905560019350505050620002d9565b5f915050620002d9565b611b2880620012fc83390190565b5f6020828403121562000e49575f80fd5b81356001600160e01b03198116811462000830575f80fd5b5f6020828403121562000e72575f80fd5b5035919050565b80356001600160a01b038116811462000e90575f80fd5b919050565b5f806040838503121562000ea7575f80fd5b8235915062000eb96020840162000e79565b90509250929050565b5f6020828403121562000ed3575f80fd5b620008308262000e79565b5f806040838503121562000ef0575f80fd5b50508035926020909101359150565b602080825282518282018190525f9190848201906040850190845b8181101562000f415783516001600160a01b03168352928401929184019160010162000f1a565b50909695505050505050565b5f805f6060848603121562000f60575f80fd5b8335925062000f726020850162000e79565b9150604084013567ffffffffffffffff81111562000f8e575f80fd5b84016060818703121562000fa0575f80fd5b809150509250925092565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b80820180821115620002d957620002d962000fbf565b81810381811115620002d957620002d962000fbf565b634e487b7160e01b5f52603260045260245ffd5b5f6001820162001027576200102762000fbf565b5060010190565b5f808335601e1984360301811262001044575f80fd5b83018035915067ffffffffffffffff8211156200105f575f80fd5b60200191503681900382131562001074575f80fd5b9250929050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b83815260018060a01b038316602082015260606040820152813560608201525f6020830135601e19843603018112620010da575f80fd5b830160208101903567ffffffffffffffff811115620010f7575f80fd5b80360382131562001106575f80fd5b606060808501526200111d60c0850182846200107b565b915050604084013560a084015280915050949350505050565b5f5b838110156200115257818101518382015260200162001138565b50505f910152565b5f83516200116d81846020880162001136565b8351908301906200118381836020880162001136565b01949350505050565b8681526bffffffffffffffffffffffff198660601b166020820152846034820152828460548301376054920191820152607401949350505050565b86815260018060a01b038616602082015284604082015260a060608201525f620011f660a0830185876200107b565b9050826080830152979650505050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081525f83516200124281601785016020880162001136565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516200127581602884016020880162001136565b01602801949350505050565b602081525f8251806020840152620012a181604085016020870162001136565b601f01601f19169190910160400192915050565b8082028115828204841417620002d957620002d962000fbf565b5f81620012e057620012e062000fbf565b505f190190565b634e487b7160e01b5f52603160045260245ffdfe60a060405234801562000010575f80fd5b5060405162001b2838038062001b288339810160408190526200003391620005b3565b33608052620000515f8051602062001b088339815191528362000093565b6004839055600580546001600160a01b0319166001600160a01b0384161790558051602082015160408301516200008a9291906200011d565b50505062000954565b6200009f82826200014a565b62000119575f8281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620000d83390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b5f8051602062001b08833981519152620001378162000176565b6200014484848462000185565b50505050565b5f8281526003602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b62000182813362000290565b50565b82620001b15760405162461bcd60e51b8152602060048201525f60248201526044015b60405180910390fd5b5f825111620001dc5760405162461bcd60e51b8152602060048201525f6024820152604401620001a8565b5f838152602081905260408120600101549003620002035762000201600182620002f4565b505b604080516060810182528281524260208083019182528284018681525f888152918290529390208251815590516001820155915190919060028201906200024b908262000740565b50905050827fb4c22d60cd550a815744f04e3ff5278bf19684565ee00e2b084041b6024bd6f683836040516200028392919062000835565b60405180910390a2505050565b6200029c82826200014a565b6200011957620002ac8162000308565b620002b98360206200031b565b604051602001620002cc92919062000858565b60408051601f198184030181529082905262461bcd60e51b8252620001a891600401620008d0565b5f620003018383620004ce565b9392505050565b6060620001706001600160a01b03831660145b60605f6200032b836002620008f8565b6200033890600262000912565b6001600160401b038111156200035257620003526200051d565b6040519080825280601f01601f1916602001820160405280156200037d576020820181803683370190505b509050600360fc1b815f815181106200039a576200039a62000928565b60200101906001600160f81b03191690815f1a905350600f60fb1b81600181518110620003cb57620003cb62000928565b60200101906001600160f81b03191690815f1a9053505f620003ef846002620008f8565b620003fc90600162000912565b90505b60018111156200047d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811062000434576200043462000928565b1a60f81b8282815181106200044d576200044d62000928565b60200101906001600160f81b03191690815f1a90535060049490941c9362000475816200093c565b9050620003ff565b508315620003015760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620001a8565b5f8181526001830160205260408120546200051557508154600181810184555f84815260208082209093018490558454848252828601909352604090209190915562000170565b505f62000170565b634e487b7160e01b5f52604160045260245ffd5b604051606081016001600160401b03811182821017156200055657620005566200051d565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200058757620005876200051d565b604052919050565b5f5b83811015620005ab57818101518382015260200162000591565b50505f910152565b5f805f60608486031215620005c6575f80fd5b8351602080860151919450906001600160a01b0381168114620005e7575f80fd5b60408601519093506001600160401b038082111562000604575f80fd5b908601906060828903121562000618575f80fd5b6200062262000531565b82518152838301518281111562000637575f80fd5b8301601f81018a1362000648575f80fd5b8051838111156200065d576200065d6200051d565b62000671601f8201601f191687016200055c565b93508084528a8682840101111562000687575f80fd5b62000698818786018885016200058f565b5050928301526040908101519082015292959194509192509050565b600181811c90821680620006c957607f821691505b602082108103620006e857634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200073b575f81815260208120601f850160051c81016020861015620007165750805b601f850160051c820191505b81811015620007375782815560010162000722565b5050505b505050565b81516001600160401b038111156200075c576200075c6200051d565b62000774816200076d8454620006b4565b84620006ee565b602080601f831160018114620007aa575f8415620007925750858301515b5f19600386901b1c1916600185901b17855562000737565b5f85815260208120601f198616915b82811015620007da57888601518255948401946001909101908401620007b9565b5085821015620007f857878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f8151808452620008218160208601602086016200058f565b601f01601f19169290920160200192915050565b604081525f62000849604083018562000808565b90508260208301529392505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081525f8351620008918160178501602088016200058f565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351620008c48160288401602088016200058f565b01602801949350505050565b602081525f62000301602083018462000808565b634e487b7160e01b5f52601160045260245ffd5b8082028115828204841417620001705762000170620008e4565b80820180821115620001705762000170620008e4565b634e487b7160e01b5f52603260045260245ffd5b5f816200094d576200094d620008e4565b505f190190565b60805161119b6200096d5f395f610244015261119b5ff3fe608060405234801561000f575f80fd5b50600436106100f0575f3560e01c806375b238fc11610093578063b10d6b4111610063578063b10d6b411461020a578063c35018481461022c578063c45a01551461023f578063d547741f14610266575f80fd5b806375b238fc146101b457806391d14854146101db5780639fa5f50b146101ee578063a217fddf14610203575f80fd5b80632f2ff15d116100ce5780632f2ff15d1461015f57806336568abe1461017457806338af3eed1461018757806374dcba56146101ac575f80fd5b8063010648ca146100f457806301ffc9a71461011c578063248a9ca31461012f575b5f80fd5b610107610102366004610d07565b610279565b60405190151581526020015b60405180910390f35b61010761012a366004610dc4565b61028f565b61015161013d366004610deb565b5f9081526003602052604090206001015490565b604051908152602001610113565b61017261016d366004610e02565b6102c5565b005b610172610182366004610e02565b6102ee565b6005546001600160a01b03165b6040516001600160a01b039091168152602001610113565b600454610151565b6101517fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6101076101e9366004610e02565b610371565b6101f661039b565b6040516101139190610e3b565b6101515f81565b61021d610218366004610deb565b6103e9565b60405161011393929190610ecb565b61010761023a366004610deb565b610508565b6101947f000000000000000000000000000000000000000000000000000000000000000081565b610172610274366004610e02565b61051a565b5f61028584848461053e565b5060019392505050565b5f6001600160e01b03198216637965db0b60e01b14806102bf57506301ffc9a760e01b6001600160e01b03198316145b92915050565b5f828152600360205260409020600101546102df81610579565b6102e98383610586565b505050565b6001600160a01b03811633146103635760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b61036d828261060b565b5050565b5f9182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60605f6103a86001610671565b90505f5b818110156103e4576103bf60018261067a565b8382815181106103d1576103d1610eef565b60209081029190910101526001016103ac565b505090565b5f818152602081905260408120600201805460609291829161040a90610f03565b90505f036104335760405162461bcd60e51b8152602060048201525f602482015260440161035a565b5f84815260208181526040808320815160608101835281548152600182015493810193909352600281018054919284019161046d90610f03565b80601f016020809104026020016040519081016040528092919081815260200182805461049990610f03565b80156104e45780601f106104bb576101008083540402835291602001916104e4565b820191905f5260205f20905b8154815290600101906020018083116104c757829003601f168201915b50505091909252505050604081015181516020909201519097919650945092505050565b5f6105128261068c565b506001919050565b5f8281526003602052604090206001015461053481610579565b6102e9838361060b565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561056881610579565b6105738484846106bf565b50505050565b61058381336107bb565b50565b6105908282610371565b61036d575f8281526003602090815260408083206001600160a01b03851684529091529020805460ff191660011790556105c73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6106158282610371565b1561036d575f8281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b5f6102bf825490565b5f6106858383610814565b9392505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756106b681610579565b61036d8261083a565b826106e55760405162461bcd60e51b8152602060048201525f602482015260440161035a565b5f82511161070e5760405162461bcd60e51b8152602060048201525f602482015260440161035a565b5f838152602081905260408120600101549003610732576107306001826109bc565b505b604080516060810182528281524260208083019182528284018681525f888152918290529390208251815590516001820155915190919060028201906107789082610f88565b50905050827fb4c22d60cd550a815744f04e3ff5278bf19684565ee00e2b084041b6024bd6f683836040516107ae929190611044565b60405180910390a2505050565b6107c58282610371565b61036d576107d2816109c7565b6107dd8360206109d9565b6040516020016107ee929190611065565b60408051601f198184030181529082905262461bcd60e51b825261035a916004016110d9565b5f825f01828154811061082957610829610eef565b905f5260205f200154905092915050565b5f81815260208181526040808320815160608101835281548152600182015493810193909352600281018054919284019161087490610f03565b80601f01602080910402602001604051908101604052809291908181526020018280546108a090610f03565b80156108eb5780601f106108c2576101008083540402835291602001916108eb565b820191905f5260205f20905b8154815290600101906020018083116108ce57829003601f168201915b505050505081525050905080602001515f036109415760405162461bcd60e51b8152602060048201526015602482015274111bd8dd5b595b9d08191bd95cdb9d08195e1a5cdd605a1b604482015260640161035a565b805161094f90600190610b6f565b505f82815260208190526040812081815560018101829055906109756002830182610ca9565b5050817f3d9bba27d3e360d8c80645beed7e991454a8271bf6f269a24f7782be0f0d06548260400151835f01516040516109b0929190611044565b60405180910390a25050565b5f6106858383610b7a565b60606102bf6001600160a01b03831660145b60605f6109e78360026110ff565b6109f2906002611116565b67ffffffffffffffff811115610a0a57610a0a610cf3565b6040519080825280601f01601f191660200182016040528015610a34576020820181803683370190505b509050600360fc1b815f81518110610a4e57610a4e610eef565b60200101906001600160f81b03191690815f1a905350600f60fb1b81600181518110610a7c57610a7c610eef565b60200101906001600160f81b03191690815f1a9053505f610a9e8460026110ff565b610aa9906001611116565b90505b6001811115610b20576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610add57610add610eef565b1a60f81b828281518110610af357610af3610eef565b60200101906001600160f81b03191690815f1a90535060049490941c93610b1981611129565b9050610aac565b5083156106855760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161035a565b5f6106858383610bc6565b5f818152600183016020526040812054610bbf57508154600181810184555f8481526020808220909301849055845484825282860190935260409020919091556102bf565b505f6102bf565b5f8181526001830160205260408120548015610ca0575f610be860018361113e565b85549091505f90610bfb9060019061113e565b9050818114610c5a575f865f018281548110610c1957610c19610eef565b905f5260205f200154905080875f018481548110610c3957610c39610eef565b5f918252602080832090910192909255918252600188019052604090208390555b8554869080610c6b57610c6b611151565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f9055600193505050506102bf565b5f9150506102bf565b508054610cb590610f03565b5f825580601f10610cc4575050565b601f0160209004905f5260205f209081019061058391905b80821115610cef575f8155600101610cdc565b5090565b634e487b7160e01b5f52604160045260245ffd5b5f805f60608486031215610d19575f80fd5b83359250602084013567ffffffffffffffff80821115610d37575f80fd5b818601915086601f830112610d4a575f80fd5b813581811115610d5c57610d5c610cf3565b604051601f8201601f19908116603f01168101908382118183101715610d8457610d84610cf3565b81604052828152896020848701011115610d9c575f80fd5b826020860160208301375f602084830101528096505050505050604084013590509250925092565b5f60208284031215610dd4575f80fd5b81356001600160e01b031981168114610685575f80fd5b5f60208284031215610dfb575f80fd5b5035919050565b5f8060408385031215610e13575f80fd5b8235915060208301356001600160a01b0381168114610e30575f80fd5b809150509250929050565b602080825282518282018190525f9190848201906040850190845b81811015610e7257835183529284019291840191600101610e56565b50909695505050505050565b5f5b83811015610e98578181015183820152602001610e80565b50505f910152565b5f8151808452610eb7816020860160208601610e7e565b601f01601f19169290920160200192915050565b606081525f610edd6060830186610ea0565b60208301949094525060400152919050565b634e487b7160e01b5f52603260045260245ffd5b600181811c90821680610f1757607f821691505b602082108103610f3557634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156102e9575f81815260208120601f850160051c81016020861015610f615750805b601f850160051c820191505b81811015610f8057828155600101610f6d565b505050505050565b815167ffffffffffffffff811115610fa257610fa2610cf3565b610fb681610fb08454610f03565b84610f3b565b602080601f831160018114610fe9575f8415610fd25750858301515b5f19600386901b1c1916600185901b178555610f80565b5f85815260208120601f198616915b8281101561101757888601518255948401946001909101908401610ff8565b508582101561103457878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b604081525f6110566040830185610ea0565b90508260208301529392505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081525f835161109c816017850160208801610e7e565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516110cd816028840160208801610e7e565b01602801949350505050565b602081525f6106856020830184610ea0565b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176102bf576102bf6110eb565b808201808211156102bf576102bf6110eb565b5f81611137576111376110eb565b505f190190565b818103818111156102bf576102bf6110eb565b634e487b7160e01b5f52603160045260245ffdfea26469706673582212201a50ae607e5d1b04d6ec79cc936cad9a7d5419e3843e4f17b3b77f7e8b1d77ba64736f6c63430008150033a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220b5d53c0100f4b654223acaad3ce4cdc5465227299d9b4102e1af29a90ae2ffa864736f6c63430008150033",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/GooddoerFactory.sol:GooddoerFactory",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/GooddoerFactory.sol:GooddoerFactory",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2122_storage)"
      },
      {
        "astId": 2849,
        "contract": "contracts/GooddoerFactory.sol:GooddoerFactory",
        "label": "_fundraisers",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)2122_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2122_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2122_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2122_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2121,
            "contract": "contracts/GooddoerFactory.sol:GooddoerFactory",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1807_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/GooddoerFactory.sol:GooddoerFactory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/GooddoerFactory.sol:GooddoerFactory",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1807_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1802,
            "contract": "contracts/GooddoerFactory.sol:GooddoerFactory",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1806,
            "contract": "contracts/GooddoerFactory.sol:GooddoerFactory",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}